---
---
const BASE = (import.meta.env.BASE_URL || "/").replace(/\/+$/, "");

const projects = [
  {
    id: "topografo",
    title: "Operación Topógrafo",
    dek: "Investigación que reveló espionaje militar a periodistas y denunciantes.",
    body: `Reportaje de investigación que reveló el espionaje de la Dirección de Inteligencia del Ejército a periodistas y funcionarios denunciantes. La publicación marcó un antes y un después en la discusión sobre transparencia y control civil de las Fuerzas Armadas, con repercusiones judiciales y mediáticas que se mantienen hasta hoy.`,
    img: `${BASE}/assets/projects/topografo.jpg`
  },
  {
    id: "vocerias",
    title: "Vocerías y despliegue",
    dek: "Fortalecimiento de vocerías y coherencia comunicacional en terreno.",
    body: `Diseño de lineamientos, preparación de portavoces, acompañamiento en terreno y estandarización de mensajes clave para un despliegue coherente en medios, regiones y redes.`,
    img: `${BASE}/assets/projects/vocerias.jpg`
  },
  {
    id: "digital",
    title: "Comunicación digital",
    dek: "Estrategia y formatos nativos para alto rendimiento.",
    body: `Reorientación de equipos y parrillas a formatos nativos, workflows editoriales y medición de impacto para mejorar alcance, retención y reputación en plataformas sociales.`,
    img: `${BASE}/assets/projects/digital.jpg`
  }
];
---

<section id="proyectos" class="section">
  <div class="container">
    <h2 class="h2">Proyectos</h2>
    <p class="section-intro">Una selección de casos con impacto, contados en tarjetas con profundidad.</p>

    <div class="p-grid">
      {projects.map((p) => (
        <article class="p-card reveal" id={`card-${p.id}`}>
          <div class="p-media">
            <img src={p.img} alt={p.title} loading="lazy" />
            <div class="p-gradient"></div>
          </div>

          <div class="p-body">
            <h3 class="p-title">{p.title}</h3>
            <p class="p-dek">{p.dek}</p>
            <button class="btn-outline p-cta" data-open={p.id} aria-haspopup="dialog" aria-controls={`proj-${p.id}`}>
              Ver caso
            </button>
          </div>

          {/* Modal de detalle */}
          <dialog class="proj-modal" id={`proj-${p.id}`} aria-labelledby={`dlg-title-${p.id}`}>
            <form method="dialog" class="proj-close-wrap">
              <button class="proj-close" aria-label="Cerrar">✕</button>
            </form>

            <div class="proj-hero">
              <img src={p.img} alt="" aria-hidden="true" />
            </div>

            <div class="proj-content">
              <h3 id={`dlg-title-${p.id}`}>{p.title}</h3>
              <p class="proj-text">{p.body}</p>
            </div>
          </dialog>
        </article>
      ))}
    </div>
  </div>

  <script is:inline>
    // Abrir modales
    document.querySelectorAll('.p-cta').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-open');
        const dlg = document.getElementById('proj-' + id);
        if (!dlg) return;
        if (typeof dlg.showModal === 'function') dlg.showModal();
        else dlg.setAttribute('open', 'open'); // fallback
      });
    });

    // Cerrar modales (botón, ESC, clic en backdrop)
    document.querySelectorAll('.proj-modal').forEach(dlg => {
      dlg.addEventListener('click', (e) => {
        const rect = dlg.getBoundingClientRect();
        const clickedBackdrop = e.clientX < rect.left || e.clientX > rect.right || e.clientY < rect.top || e.clientY > rect.bottom;
        if (clickedBackdrop) dlg.close();
      });
      dlg.addEventListener('cancel', (e) => { e.preventDefault(); dlg.close(); }); // ESC
    });
  </script>
</section>

<style>
  .p-grid{
    display:grid;
    grid-template-columns:repeat(auto-fit,minmax(300px,1fr));
    gap:1.2rem;
  }
  .p-card{
    position:relative;
    overflow:hidden;
    border-radius:20px;
    background:#10161d;
    border:1px solid #1f2a37;
    box-shadow:0 10px 26px rgba(0,0,0,.5);
  }
  .p-media{ position:relative; height: 220px; background:#0b0f14; }
  .p-media img{
    width:100%; height:100%; object-fit:cover; display:block;
    filter:brightness(.82) contrast(1.05);
  }
  .p-gradient{
    position:absolute; inset:auto 0 0 0; height:46%;
    background:linear-gradient(180deg, transparent, rgba(10,14,18,.85));
  }
  .p-body{ padding:1.1rem; }
  .p-title{ margin:0 0 .35rem; font-size:1.15rem; color:#eaf2f8; }
  .p-dek{ margin:.25rem 0 1rem; color:#c9d3df; }
  .p-cta{ font-weight:700; }

  /* ===== Modal ===== */
  .proj-modal{
    width:min(920px, 94vw);
    max-height:90dvh;
    border:none; padding:0;
    border-radius:18px; overflow:hidden;
    background:#0e141a; color:#e6eef4;
    box-shadow:0 30px 120px rgba(0,0,0,.65);
  }
  .proj-modal::backdrop{ background:rgba(3,6,10,.65); backdrop-filter:blur(2px); }
  .proj-close-wrap{ position:absolute; top:10px; right:10px; z-index:2; }
  .proj-close{
    border:1px solid #263242; background:#111a23; color:#e6eef4;
    width:36px; height:36px; border-radius:999px; cursor:pointer;
  }
  .proj-hero{ width:100%; height:min(40vh,320px); background:#0b1015; }
  .proj-hero img{ width:100%; height:100%; object-fit:cover; display:block; }
  .proj-content{ padding:1.25rem 1.25rem 1.4rem; }
  .proj-content h3{ margin:.1rem 0 .5rem; }
  .proj-text{ color:#c9d3df; line-height:1.7; }
</style>