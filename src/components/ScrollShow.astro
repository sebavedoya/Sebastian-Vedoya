---
const steps = [
  {
    k: "variedad",
    title: "Variedad ≠ Ruido",
    lead: "El entorno es complejo: múltiples públicos, medios y tiempos. La estrategia debe igualar o domesticar esa complejidad.",
    detail: "Priorización, umbrales de decisión y rutas narrativas para no reaccionar al azar."
  },
  {
    k: "arquitectura",
    title: "Arquitectura de Mensajes",
    lead: "Coherentes entre niveles, adaptables por canal y territorio.",
    detail: "Framing, evidencias y cadencias que evitan disonancias entre centro y regiones."
  },
  {
    k: "operacion",
    title: "Operación Multicanal",
    lead: "Prensa, redes, comunicación interna y terreno con un mismo propósito.",
    detail: "Métricas accionables por sobre la vanidad. Documentación de aprendizajes."
  }
];
---
<section class="section pin-layout" aria-label="Narrativa estratégica">
  <!-- Panel pegado (sticky) -->
  <aside class="pin-panel" aria-hidden="true">
    <div class="pin-panel-inner">
      <p class="pin-eyebrow">Marco</p>
      <h3 class="pin-title" id="pinTitle">Variedad ≠ Ruido</h3>
      <p class="pin-lead" id="pinLead">
        El entorno es complejo: múltiples públicos, medios y tiempos. La estrategia debe igualar o domesticar esa complejidad.
      </p>
      <p class="pin-detail" id="pinDetail">
        Priorización, umbrales de decisión y rutas narrativas para no reaccionar al azar.
      </p>

      <div class="pin-steps-dotbar" aria-hidden="true">
        {steps.map((_, i) => <span class="dot" data-i={i}></span>)}
      </div>
    </div>
  </aside>

  <!-- Pasos que activan el panel -->
  <div class="pin-steps" id="pinSteps">
    {steps.map((s, i) => (
      <article class="pin-step" data-i={i} tabindex="0" aria-describedby="pinTitle pinLead pinDetail">
        <header class="pin-step-head">
          <span class="step-index">{String(i+1).padStart(2,"0")}</span>
          <h4>{s.title}</h4>
        </header>
        <p class="pin-step-text">{s.lead}</p>
        <p class="pin-step-detail">{s.detail}</p>
      </article>
    ))}
  </div>
</section>

<script is:inline>
  const steps = Array.from(document.querySelectorAll('.pin-step'));
  const dots = Array.from(document.querySelectorAll('.pin-steps-dotbar .dot'));
  const title = document.getElementById('pinTitle');
  const lead  = document.getElementById('pinLead');
  const det   = document.getElementById('pinDetail');

  const data = steps.map(s => ({
    title: s.querySelector('h4')?.textContent ?? '',
    lead:  s.querySelector('.pin-step-text')?.textContent ?? '',
    det:   s.querySelector('.pin-step-detail')?.textContent ?? ''
  }));

  const active = new Set();
  const io = new IntersectionObserver((entries)=>{
    for(const e of entries){
      const el = e.target;
      if(e.isIntersecting){ active.add(el); el.classList.add('is-active'); }
      else { active.delete(el); el.classList.remove('is-active'); }

      const current = [...active].sort((a,b)=> a.dataset.i - b.dataset.i).at(-1);
      if(current){
        const i = Number(current.dataset.i);
        // actualizar panel
        title.textContent = data[i].title;
        lead.textContent  = data[i].lead;
        det.textContent   = data[i].det;
        title.classList.add('swap-in'); lead.classList.add('swap-in'); det.classList.add('swap-in');
        setTimeout(()=>{ title.classList.remove('swap-in'); lead.classList.remove('swap-in'); det.classList.remove('swap-in'); }, 500);

        // marcar dots
        dots.forEach((d, idx)=> d.classList.toggle('is-on', idx <= i));
      }
    }
  }, { rootMargin: "-30% 0px -30% 0px", threshold: 0.55 });

  steps.forEach(s => io.observe(s));
</script>