---
import "../styles/global.css";
const {
  title = 'Sebastián Vedoya M. — Comunicación Estratégica',
  description = 'Estratega en comunicación con más de 10 años de experiencia en medios y gobierno. Me dedico a buscar respuestas complejas para entornos complejos.'
} = Astro.props;
---
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content={description} />
  <title>{title}</title>

  <link rel="icon" href={new URL('/favicon.svg', Astro.site).pathname} type="image/svg+xml" />
  <meta name="color-scheme" content="dark light" />
  <meta name="theme-color" content="#0a0a0a" media="(prefers-color-scheme: dark)" />

  <!-- IBM Plex Sans -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link
    href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;500;600;700&display=swap"
    rel="stylesheet"
  />

  <!-- Google Analytics -->
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-03ZMGB2V69"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){ dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'G-03ZMGB2V69');
  </script>
</head>
<body>
  <slot />

  <!-- Early reveal global para .stage-item / .reveal / [data-fade] -->
  <script is:inline>
    document.documentElement.classList.add('js');

    // Observador "temprano": dispara cuando el elemento está aún lejos (entra antes).
    // 70% del viewport por encima y sólo 10% de salida inferior => entrada MUY pronto.
    const ioEarly = new IntersectionObserver((entries) => {
      for (const e of entries) {
        const el = e.target;
        if (e.isIntersecting) {
          el.classList.add('is-on','revealed','reveal--in','fade-in--visible');
        } else {
          // Mantén la clase al bajar; si quieres fade-out al subir, podrías quitar aquí.
          // Lo dejamos persistente para que no "parpadee".
        }
      }
    }, { rootMargin: '70% 0% -10% 0%', threshold: 0 });

    // Registra todos los elementos candidatos
    const all = document.querySelectorAll('.stage-item, .reveal, [data-fade]');
    all.forEach(el => ioEarly.observe(el));
  </script>
</body>
</html>